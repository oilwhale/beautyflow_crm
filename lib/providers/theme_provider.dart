import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

// ==================== THEME MODE PROVIDER ====================

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–µ–º—ã (light/dark/system)
final themeModeProvider =
    StateNotifierProvider<ThemeModeNotifier, ThemeMode>((ref) {
  return ThemeModeNotifier();
});

class ThemeModeNotifier extends StateNotifier<ThemeMode> {
  ThemeModeNotifier() : super(ThemeMode.light);

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
  void setLightMode() {
    state = ThemeMode.light;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É
  void setDarkMode() {
    state = ThemeMode.dark;
  }

  /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
  void setSystemMode() {
    state = ThemeMode.system;
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
  void toggleTheme() {
    state = state == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ –∏–Ω–¥–µ–∫—Å—É (0 = light, 1 = dark, 2 = system)
  void setModeByIndex(int index) {
    switch (index) {
      case 0:
        state = ThemeMode.light;
        break;
      case 1:
        state = ThemeMode.dark;
        break;
      case 2:
        state = ThemeMode.system;
        break;
      default:
        state = ThemeMode.light;
    }
  }
}

// ==================== THEME VARIANT PROVIDER ====================

/// –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ç–µ–º
enum ThemeVariant {
  /// –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ (—Å–ª–∏–≤–æ–≤—ã–π)
  primary,

  /// –†–æ–∑–æ–≤–∞—è —Ç–µ–º–∞
  rose,

  /// –õ–∞–≤–∞–Ω–¥–æ–≤–∞—è —Ç–µ–º–∞
  lavender,

  /// –ü–µ—Ä—Å–∏–∫–æ–≤–∞—è —Ç–µ–º–∞
  peach,

  /// –ú—è—Ç–Ω–∞—è —Ç–µ–º–∞
  mint,

  /// –ö–æ—Ä–∞–ª–ª–æ–≤–∞—è —Ç–µ–º–∞
  coral,

  /// –®–æ–∫–æ–ª–∞–¥–Ω–∞—è —Ç–µ–º–∞
  chocolate,
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–º—ã
final themeVariantProvider =
    StateNotifierProvider<ThemeVariantNotifier, ThemeVariant>((ref) {
  return ThemeVariantNotifier();
});

class ThemeVariantNotifier extends StateNotifier<ThemeVariant> {
  ThemeVariantNotifier() : super(ThemeVariant.primary);

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–º—ã
  void setVariant(ThemeVariant variant) {
    state = variant;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
  String getVariantName(ThemeVariant variant) {
    switch (variant) {
      case ThemeVariant.primary:
        return '–°–ª–∏–≤–æ–≤–∞—è';
      case ThemeVariant.rose:
        return '–†–æ–∑–æ–≤–∞—è';
      case ThemeVariant.lavender:
        return '–õ–∞–≤–∞–Ω–¥–æ–≤–∞—è';
      case ThemeVariant.peach:
        return '–ü–µ—Ä—Å–∏–∫–æ–≤–∞—è';
      case ThemeVariant.mint:
        return '–ú—è—Ç–Ω–∞—è';
      case ThemeVariant.coral:
        return '–ö–æ—Ä–∞–ª–ª–æ–≤–∞—è';
      case ThemeVariant.chocolate:
        return '–®–æ–∫–æ–ª–∞–¥–Ω–∞—è';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ç–µ–º—ã
  String getVariantEmoji(ThemeVariant variant) {
    switch (variant) {
      case ThemeVariant.primary:
        return 'üíú';
      case ThemeVariant.rose:
        return 'üåπ';
      case ThemeVariant.lavender:
        return 'üíê';
      case ThemeVariant.peach:
        return 'üçë';
      case ThemeVariant.mint:
        return 'üåø';
      case ThemeVariant.coral:
        return 'ü™∏';
      case ThemeVariant.chocolate:
        return 'üç´';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
  List<Map<String, dynamic>> getAllVariants() {
    return ThemeVariant.values.map((variant) {
      return {
        'variant': variant,
        'name': getVariantName(variant),
        'emoji': getVariantEmoji(variant),
      };
    }).toList();
  }
}

// ==================== IS DARK MODE PROVIDER ====================

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
final isDarkModeProvider = Provider<bool>((ref) {
  final themeMode = ref.watch(themeModeProvider);

  if (themeMode == ThemeMode.system) {
    // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è—Ä–∫–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ MediaQuery
    // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –∫–∞–∫ default
    return false;
  }

  return themeMode == ThemeMode.dark;
});

// ==================== FONT SCALE PROVIDER ====================

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–∞—Å—à—Ç–∞–±–∞ —à—Ä–∏—Ñ—Ç–∞
final fontScaleProvider =
    StateNotifierProvider<FontScaleNotifier, double>((ref) {
  return FontScaleNotifier();
});

class FontScaleNotifier extends StateNotifier<double> {
  FontScaleNotifier() : super(1.0);

  /// –£–≤–µ–ª–∏—á–∏—Ç—å —à—Ä–∏—Ñ—Ç
  void increaseScale() {
    if (state < 1.5) {
      state += 0.1;
    }
  }

  /// –£–º–µ–Ω—å—à–∏—Ç—å —à—Ä–∏—Ñ—Ç
  void decreaseScale() {
    if (state > 0.8) {
      state -= 0.1;
    }
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±
  void resetScale() {
    state = 1.0;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  void setScale(double scale) {
    if (scale >= 0.8 && scale <= 1.5) {
      state = scale;
    }
  }
}

// ==================== ANIMATION SETTINGS PROVIDER ====================

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
final animationSettingsProvider =
    StateNotifierProvider<AnimationSettingsNotifier, AnimationSettings>((ref) {
  return AnimationSettingsNotifier();
});

class AnimationSettings {
  final bool enabled;
  final double speed; // 0.5 = –º–µ–¥–ª–µ–Ω–Ω–æ, 1.0 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ, 1.5 = –±—ã—Å—Ç—Ä–æ

  const AnimationSettings({
    this.enabled = true,
    this.speed = 1.0,
  });

  AnimationSettings copyWith({
    bool? enabled,
    double? speed,
  }) {
    return AnimationSettings(
      enabled: enabled ?? this.enabled,
      speed: speed ?? this.speed,
    );
  }
}

class AnimationSettingsNotifier extends StateNotifier<AnimationSettings> {
  AnimationSettingsNotifier() : super(const AnimationSettings());

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
  void toggleAnimations() {
    state = state.copyWith(enabled: !state.enabled);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
  void setSpeed(double speed) {
    if (speed >= 0.5 && speed <= 1.5) {
      state = state.copyWith(speed: speed);
    }
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  void reset() {
    state = const AnimationSettings();
  }
}

// ==================== COMPACT MODE PROVIDER ====================

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã)
final compactModeProvider =
    StateNotifierProvider<CompactModeNotifier, bool>((ref) {
  return CompactModeNotifier();
});

class CompactModeNotifier extends StateNotifier<bool> {
  CompactModeNotifier() : super(false);

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
  void toggle() {
    state = !state;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º
  void setCompactMode(bool isCompact) {
    state = isCompact;
  }
}

// ==================== HELPER PROVIDERS ====================

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è Duration –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
final animationDurationProvider = Provider<Duration>((ref) {
  final settings = ref.watch(animationSettingsProvider);

  if (!settings.enabled) {
    return Duration.zero;
  }

  final baseMs = 300; // –±–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  final adjustedMs = (baseMs / settings.speed).round();

  return Duration(milliseconds: adjustedMs);
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã
final currentThemeNameProvider = Provider<String>((ref) {
  final variant = ref.watch(themeVariantProvider);
  final notifier = ref.read(themeVariantProvider.notifier);
  return notifier.getVariantName(variant);
});
