import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:beautyflow_crm/config/theme/app_theme.dart';
import 'package:beautyflow_crm/config/theme/app_colors.dart';
import 'package:beautyflow_crm/config/theme/app_spacing.dart';
import 'package:beautyflow_crm/config/theme/app_text_styles.dart';
import 'package:beautyflow_crm/core/services/hive_service.dart';
import 'package:beautyflow_crm/ui/widgets/buttons/primary_button.dart';
import 'package:beautyflow_crm/ui/widgets/buttons/secondary_button.dart';
import 'package:beautyflow_crm/ui/widgets/buttons/danger_button.dart';
import 'package:beautyflow_crm/ui/widgets/inputs/custom_text_field.dart';
import 'package:beautyflow_crm/ui/widgets/cards/custom_card.dart';
import 'package:beautyflow_crm/ui/widgets/badges/status_badge.dart';
import 'package:beautyflow_crm/ui/widgets/avatars/custom_avatar.dart';
// –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
import 'package:beautyflow_crm/providers/client_provider.dart';
import 'package:beautyflow_crm/providers/service_provider.dart';
import 'package:beautyflow_crm/providers/appointment_provider.dart';
import 'package:beautyflow_crm/providers/expense_provider.dart';
import 'package:beautyflow_crm/providers/theme_provider.dart';
import 'package:beautyflow_crm/providers/navigation_provider.dart';
// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import 'package:beautyflow_crm/data/models/client_model.dart';
import 'package:beautyflow_crm/data/models/service_model.dart';
import 'package:beautyflow_crm/data/models/appointment_model.dart';
import 'package:beautyflow_crm/data/models/expense_model.dart';
import 'package:uuid/uuid.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive
  try {
    await HiveService.init();
    print('‚úÖ Hive initialized successfully');
  } catch (e) {
    print('‚ùå Error initializing Hive: $e');
  }

  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: Brightness.dark,
      systemNavigationBarColor: AppColors.white,
      systemNavigationBarIconBrightness: Brightness.dark,
    ),
  );

  runApp(
    const ProviderScope(
      child: BeautyFlowApp(),
    ),
  );
}

class BeautyFlowApp extends ConsumerWidget {
  const BeautyFlowApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // –°–ª–µ–¥–∏–º –∑–∞ —Ç–µ–º–æ–π –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    final themeMode = ref.watch(themeModeProvider);

    return MaterialApp(
      title: 'BeautyFlow CRM',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme(),
      darkTheme: AppTheme.darkTheme(),
      themeMode: themeMode,
      home: const ComponentsTestScreen(),
    );
  }
}

/// –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ + —Ç–µ—Å—Ç –ë–î + —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
class ComponentsTestScreen extends ConsumerWidget {
  const ComponentsTestScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // –°–ª–µ–¥–∏–º –∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    final clientsCount = ref.watch(clientsCountProvider);
    final servicesCount = ref.watch(servicesCountProvider);
    final appointmentsCount = ref.watch(appointmentsCountProvider);
    final expensesCount = ref.watch(expensesCountProvider);
    final currentTheme = ref.watch(currentThemeNameProvider);
    final currentScreen = ref.watch(currentScreenTitleProvider);

    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: AppColors.backgroundGradient,
        ),
        child: SafeArea(
          child: ListView(
            padding: AppSpacing.screenPadding,
            children: [
              // –ó–∞–≥–æ–ª–æ–≤–æ–∫
              Text(
                'UI Kit Components',
                style: AppTextStyles.h1,
              ),
              AppSpacing.vGapBase,
              Text(
                '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ + –ë–î + –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã',
                style: AppTextStyles.h4.copyWith(color: AppColors.textGray),
              ),
              AppSpacing.vGapXl,

              // === –¢–ï–°–¢ –ü–†–û–í–ê–ô–î–ï–†–û–í ===
              CustomCard(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üöÄ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Riverpod)',
                      style: AppTextStyles.h3,
                    ),
                    AppSpacing.vGapMd,
                    Text(
                      '–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: $currentTheme\n'
                      '–≠–∫—Ä–∞–Ω: $currentScreen\n'
                      '–ö–ª–∏–µ–Ω—Ç–æ–≤: $clientsCount\n'
                      '–£—Å–ª—É–≥: $servicesCount\n'
                      '–ó–∞–ø–∏—Å–µ–π: $appointmentsCount\n'
                      '–†–∞—Å—Ö–æ–¥–æ–≤: $expensesCount',
                      style: AppTextStyles.body,
                    ),
                    AppSpacing.vGapMd,
                    Row(
                      children: [
                        Expanded(
                          child: PrimaryButton(
                            text: '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
                            icon: Icons.add_circle,
                            onPressed: () async {
                              await _createTestData(ref);
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!'),
                                  duration: Duration(seconds: 2),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                    AppSpacing.vGapSm,
                    Row(
                      children: [
                        Expanded(
                          child: SecondaryButton(
                            text: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É',
                            icon: Icons.brightness_6,
                            onPressed: () {
                              final currentMode = ref.read(themeModeProvider);
                              ref
                                  .read(themeModeProvider.notifier)
                                  .toggleTheme();
                              final newMode = ref.read(themeModeProvider);

                              print(
                                  'üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: $currentMode ‚Üí $newMode');

                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text('–¢–µ–º–∞: $newMode'),
                                  duration: const Duration(seconds: 1),
                                ),
                              );
                            },
                          ),
                        ),
                        AppSpacing.hGapSm,
                        Expanded(
                          child: SecondaryButton(
                            text: '–ù–∞–≤–∏–≥–∞—Ü–∏—è',
                            icon: Icons.navigation,
                            onPressed: () {
                              ref
                                  .read(bottomNavIndexProvider.notifier)
                                  .cycleNext();
                            },
                          ),
                        ),
                      ],
                    ),
                    AppSpacing.vGapSm,
                    Row(
                      children: [
                        Expanded(
                          child: DangerButton(
                            text: '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë',
                            icon: Icons.delete_forever,
                            onPressed: () async {
                              await _clearAllData(ref);
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã'),
                                  duration: Duration(seconds: 2),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),

              AppSpacing.vGapXl,

              // === –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
              CustomCard(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Hive',
                      style: AppTextStyles.h3,
                    ),
                    AppSpacing.vGapMd,
                    Text(
                      '–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Hive –±–æ–∫—Å–æ–≤',
                      style: AppTextStyles.small,
                    ),
                    AppSpacing.vGapMd,
                    Row(
                      children: [
                        Expanded(
                          child: PrimaryButton(
                            text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î',
                            icon: Icons.storage,
                            onPressed: () {
                              final clientsCount = HiveService.clients.length;
                              final servicesCount = HiveService.services.length;
                              final appointmentsCount =
                                  HiveService.appointments.length;
                              final expensesCount = HiveService.expenses.length;
                              final settingsCount = HiveService.settings.length;

                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text(
                                    '‚úÖ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç!\n'
                                    '–ö–ª–∏–µ–Ω—Ç–æ–≤: $clientsCount\n'
                                    '–£—Å–ª—É–≥: $servicesCount\n'
                                    '–ó–∞–ø–∏—Å–µ–π: $appointmentsCount\n'
                                    '–†–∞—Å—Ö–æ–¥–æ–≤: $expensesCount\n'
                                    '–ù–∞—Å—Ç—Ä–æ–µ–∫: $settingsCount',
                                  ),
                                  duration: const Duration(seconds: 3),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),

              AppSpacing.vGapXl,

              // === –ö–ù–û–ü–ö–ò ===
              _buildSection(
                '–ö–Ω–æ–ø–∫–∏',
                Column(
                  children: [
                    PrimaryButton(
                      text: 'Primary Button',
                      onPressed: () {},
                      icon: Icons.add,
                    ),
                    AppSpacing.vGapMd,
                    SecondaryButton(
                      text: 'Secondary Button',
                      onPressed: () {},
                      icon: Icons.edit,
                    ),
                    AppSpacing.vGapMd,
                    DangerButton(
                      text: 'Delete',
                      icon: Icons.delete,
                      onPressed: () {},
                    ),
                  ],
                ),
              ),

              AppSpacing.vGapXl,

              // === –ü–û–õ–Ø –í–í–û–î–ê ===
              _buildSection(
                '–ü–æ–ª—è –≤–≤–æ–¥–∞',
                Column(
                  children: [
                    CustomTextField(
                      label: '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞',
                      hint: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è...',
                      prefixIcon: Icons.person,
                      controller: TextEditingController(),
                    ),
                    AppSpacing.vGapMd,
                    SearchTextField(
                      hint: '–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...',
                      controller: TextEditingController(),
                    ),
                  ],
                ),
              ),

              AppSpacing.vGapXl,

              // === –ö–ê–†–¢–û–ß–ö–ò ===
              _buildSection(
                '–ö–∞—Ä—Ç–æ—á–∫–∏',
                Column(
                  children: [
                    CustomCard(
                      child: Text('–ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'),
                    ),
                    AppSpacing.vGapMd,
                    CustomCard(
                      child: Column(
                        children: [
                          Row(
                            children: [
                              const CustomAvatar(
                                name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
                                size: 52,
                              ),
                              AppSpacing.hGapMd,
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
                                      style: AppTextStyles.h4,
                                    ),
                                    AppSpacing.vGapXs,
                                    Text(
                                      '+7 (999) 123-45-67',
                                      style: AppTextStyles.small,
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          AppSpacing.vGapMd,
                          Row(
                            children: [
                              StatusBadge.vip(isSmall: true),
                              AppSpacing.hGapSm,
                              StatusBadge.status('confirmed', isSmall: true),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),

              AppSpacing.vGapXl,

              // === –ë–ï–ô–î–ñ–ò ===
              _buildSection(
                '–ë–µ–π–¥–∂–∏',
                Wrap(
                  spacing: AppSpacing.sm,
                  runSpacing: AppSpacing.sm,
                  children: [
                    StatusBadge.status('confirmed'),
                    StatusBadge.status('pending'),
                    StatusBadge.status('cancelled'),
                    StatusBadge.vip(),
                    const CountBadge(count: 5),
                    CategoryTag.service('–í–æ–ª–æ—Å—ã'),
                    CategoryTag.service('–ù–æ–≥—Ç–∏'),
                  ],
                ),
              ),

              AppSpacing.vGapXl,

              // === –ê–í–ê–¢–ê–†–´ ===
              _buildSection(
                '–ê–≤–∞—Ç–∞—Ä—ã',
                Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: const [
                        CustomAvatar(
                          name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
                          size: 40,
                        ),
                        CustomAvatar(
                          name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
                          size: 52,
                        ),
                        CustomAvatar(
                          name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                          size: 64,
                          hasStatus: true,
                        ),
                      ],
                    ),
                    AppSpacing.vGapMd,
                    const AvatarGroup(
                      names: [
                        '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
                        '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
                        '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                        '–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
                        '–¢–∞—Ç—å—è–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞',
                      ],
                      maxVisible: 4,
                    ),
                  ],
                ),
              ),

              AppSpacing.vGapXxl,
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSection(String title, Widget child) {
    return CustomCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: AppTextStyles.h3,
          ),
          AppSpacing.vGapMd,
          child,
        ],
      ),
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> _createTestData(WidgetRef ref) async {
    const uuid = Uuid();

    // 1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    final testClients = [
      ClientModel(
        id: uuid.v4(),
        name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
        phone: '+7 (999) 123-45-67',
        email: 'anna@example.com',
        birthday: DateTime(1990, 5, 15),
        notes: '–õ—é–±–∏—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞',
        rating: 5.0,
        totalVisits: 12,
        totalRevenue: 24000,
        lastVisitDate: DateTime.now().subtract(const Duration(days: 5)),
        createdAt: DateTime.now().subtract(const Duration(days: 180)),
        isVip: true,
        tags: ['–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç'],
      ),
      ClientModel(
        id: uuid.v4(),
        name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        phone: '+7 (999) 234-56-78',
        rating: 4.5,
        totalVisits: 8,
        totalRevenue: 16000,
        lastVisitDate: DateTime.now().subtract(const Duration(days: 10)),
        createdAt: DateTime.now().subtract(const Duration(days: 90)),
        isVip: false,
      ),
      ClientModel(
        id: uuid.v4(),
        name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
        phone: '+7 (999) 345-67-89',
        rating: 5.0,
        totalVisits: 20,
        totalRevenue: 40000,
        lastVisitDate: DateTime.now().subtract(const Duration(days: 2)),
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
        isVip: true,
        tags: ['vip', '–¥—Ä—É–≥'],
      ),
    ];

    for (final client in testClients) {
      await ref.read(clientNotifierProvider.notifier).createClient(client);
    }

    // 2. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏
    final testServices = [
      ServiceModel(
        id: uuid.v4(),
        name: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è',
        category: 'hair',
        price: 2000,
        duration: 60,
        description: '–°—Ç—Ä–∏–∂–∫–∞ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
        isActive: true,
        timesPerformed: 45,
        totalRevenue: 90000,
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
      ),
      ServiceModel(
        id: uuid.v4(),
        name: '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
        category: 'nails',
        price: 1500,
        duration: 90,
        description: '–ú–∞–Ω–∏–∫—é—Ä + –≥–µ–ª—å-–ª–∞–∫',
        isActive: true,
        timesPerformed: 60,
        totalRevenue: 90000,
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
      ),
      ServiceModel(
        id: uuid.v4(),
        name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ',
        category: 'hair',
        price: 5000,
        duration: 180,
        description: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å –ø—Ä–µ–º–∏—É–º –∫—Ä–∞—Å–∏—Ç–µ–ª—è–º–∏',
        isActive: true,
        timesPerformed: 30,
        totalRevenue: 150000,
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
      ),
    ];

    for (final service in testServices) {
      await ref.read(serviceNotifierProvider.notifier).createService(service);
    }

    // 3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    final testAppointments = [
      AppointmentModel(
        id: uuid.v4(),
        clientId: testClients[0].id,
        serviceIds: [testServices[0].id],
        date: DateTime.now().add(const Duration(days: 1)),
        time: '14:00',
        duration: 60,
        price: 2000,
        status: 'confirmed',
        notes: '–ö–ª–∏–µ–Ω—Ç –ø–æ–ø—Ä–æ—Å–∏–ª –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç—Ä–∏–∂–∫—É',
        createdAt: DateTime.now(),
      ),
      AppointmentModel(
        id: uuid.v4(),
        clientId: testClients[1].id,
        serviceIds: [testServices[1].id],
        date: DateTime.now().add(const Duration(days: 2)),
        time: '16:00',
        duration: 90,
        price: 1500,
        status: 'pending',
        createdAt: DateTime.now(),
      ),
    ];

    for (final appointment in testAppointments) {
      await ref
          .read(appointmentNotifierProvider.notifier)
          .createAppointment(appointment);
    }

    // 4. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    final testExpenses = [
      ExpenseModel(
        id: uuid.v4(),
        name: '–ó–∞–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
        amount: 15000,
        category: 'materials',
        date: DateTime.now().subtract(const Duration(days: 5)),
        notes: '–ì–µ–ª—å-–ª–∞–∫–∏, –ø–∏–ª–∫–∏, –±–∞–∑—ã',
        createdAt: DateTime.now(),
      ),
      ExpenseModel(
        id: uuid.v4(),
        name: '–ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è',
        amount: 30000,
        category: 'rent',
        date: DateTime.now().subtract(const Duration(days: 1)),
        notes: '–ê—Ä–µ–Ω–¥–∞ –∑–∞ –æ–∫—Ç—è–±—Ä—å',
        createdAt: DateTime.now(),
      ),
      ExpenseModel(
        id: uuid.v4(),
        name: '–†–µ–∫–ª–∞–º–∞ –≤ Instagram',
        amount: 5000,
        category: 'marketing',
        date: DateTime.now().subtract(const Duration(days: 10)),
        notes: '–¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
        createdAt: DateTime.now(),
      ),
    ];

    for (final expense in testExpenses) {
      await ref.read(expenseNotifierProvider.notifier).createExpense(expense);
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> _clearAllData(WidgetRef ref) async {
    await HiveService.clients.clear();
    await HiveService.services.clear();
    await HiveService.appointments.clear();
    await HiveService.expenses.clear();
  }
}
